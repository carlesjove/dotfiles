" Make sure Plug is installed
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if &compatible
  set nocompatible
end

" Remove declared plugins
function! s:UnPlug(plug_name)
  if has_key(g:plugs, a:plug_name)
    call remove(g:plugs, a:plug_name)
  endif
endfunction
command!  -nargs=1 UnPlug call s:UnPlug(<args>)

let g:has_async = v:version >= 800 || has('nvim')

call plug#begin('~/.vim/bundle')

" If fzf has already been installed via Homebrew, use the existing fzf
" Otherwise, install fzf. The `--all` flag makes fzf accessible outside of vim
if isdirectory("/usr/local/opt/fzf")
  Plug '/usr/local/opt/fzf'
else
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
endif

Plug 'junegunn/fzf.vim'
Plug 'janko-m/vim-test' " Run tests on different granularities
Plug 'pangloss/vim-javascript'
Plug 'pbrisbin/vim-mkdir' " Creates a non/existing/directory/for/you.txt
Plug 'tpope/vim-bundler'
Plug 'tpope/vim-endwise' " Closes certain structure automatically
Plug 'tpope/vim-fugitive' " Git commodities inside Vim
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'tpope/vim-surround' " Delete, change or add code surroundings
Plug 'vim-ruby/vim-ruby'
Plug 'vim-scripts/tComment' " Comment and uncomment lines easily
Plug 'mustache/vim-mustache-handlebars'

call plug#end()
